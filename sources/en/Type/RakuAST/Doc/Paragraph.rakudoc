=begin pod :kind("Type") :subkind("class") :category("basic")

=TITLE class RakuAST::Doc::Paragraph

=SUBTITLE Contains the information about a RakuDoc paragraph

    class RakuAST::Doc::Paragraph { }

The C<RakuAST::Doc::Paragraph> class contains the information about a
logical paragraph in a C<RakuDoc> block.

Support for L<C<RakuAST>|/type/RakuAST> functionality is available in language version
C<6.e+> and was added in Rakudo compiler release 2023.02.  In earlier
language versions it is only available when specifying:

    use experimental :rakuast;

=head2 Object introspection

C<RakuAST::Doc::Paragraph> objects are typically created when parsing
Raku Programming Language code that has C<RakuDoc> markers in it.
So most developers will only need to know how to introspect the
objects created.

=head3 method atoms

=begin code :preamble<my $paragraphs>
.put for $paragraphs.atoms;
# Text before ␤B<and>␤ after markup␤
=end code

Returns the atoms of the paragraph.  These are generally a mix of
strings and L«C<RakuAST::Doc::Markup>|/type/RakuAST::Doc::Markup»
objects.

=head3 method Str

=begin code :preamble<my $paragraph>
put $paragraph;  # Text before B<and> after markup␤␤
=end code

Returns the string for the paragraph, with any markup stringified.

=head3 method raku

=begin code :preamble<my $block>
# method .gist falls back to .raku
say $block;  # RakuAST::Doc::Paragraph.new(...
=end code

Returns the string that is needed for the creation of the paragraph
using L<C<RakuAST>|/type/RakuAST> calls.

=head1 Object creation

One seldom creates C<RakuAST::Doc::Paragraph> objects directly.  This
documentation is intended for those few people who'd like to devise
their own way of programmatically building a C<RakuAST::Doc::Paragraph>
object.

=head2 method new

    method new(*@atoms)

The C<new> method must be called to create a new C<RakuAST::Doc::Paragraph>
object.  It takes any number of positional arguments as the atoms of
the logical paragraph, where an atom is either a string or a
L<C<RakuAST::Doc::Markup>|/type/RakuAST::Doc::Markup> object.

Typically a C<RakuAST::Doc::Paragraph> object is only created if a
logical paragraph has at least one markup object.

=begin code :lang<raku> :preamble<use experimental :rakuast>
my $paragraph = RakuAST::Doc::Paragraph.new(
  "Text before ",
  RakuAST::Doc::Markup.new(:letter<B>, :atoms("and")),
  " after markup\n"
);
=end code

=head1 Object modification

=head2 method add-atom

=begin code :preamble<my $paragraph>
$paragraph.add-atom("baz\n");
=end code

Add an atom: should be a string, or a L<C<RakuAST::Doc::Markup>|/type/RakuAST::Doc::Markup>
object.

=end pod
