=begin pod :kind("Type") :subkind("class") :category("basic")

=TITLE class RakuAST::Doc::Markup

=SUBTITLE Contains the information about RakuDoc markup

    class RakuAST::Doc::Markup { }

The C<RakuAST::Doc::Markup> class contains the information about
markup codes in a L«C<RakuAST::Doc::Paragraph>|/type/RakuAST::Doc::Paragraph»
or another C<RakuAST::Doc::Markup> object.

Support for L<C<RakuAST>|/type/RakuAST> functionality is available in language version
C<6.e+> and was added in Rakudo compiler release 2023.02.  In earlier
language versions it is only available when specifying:

    use experimental :rakuast;

=head2 Object introspection

C<RakuAST::Doc::Markup> objects are typically created when parsing
Raku Programming Language code that has C<RakuDoc> markers in it.
So most developers will only need to know how to introspect the
objects created.

=head3 method letter

=begin code :preamble<my $markup>
say "letter = $markup.letter()";  # B␤
=end code

Returns the letter of the markup.  This is usually an uppercase
letter (any Unicode codepoint with the "Lu" property), such as
C<B>, but can also be a letter like C<Δ>.

=head3 method opener

=begin code :preamble<my $markup>
say "opener = $markup.opener()";  # <␤
=end code

Returns the string that indicates the opener of the markup.
This is typically "<", "<<" or "«".  It is mostly intended to
be used for stringification of the C<RakuAST::Doc::Markup>
object.

=head3 method closer

=begin code :preamble<my $markup>
say "closer = $markup.closer()";  # >␤
=end code

Returns the string that indicates the closer of the markup.
This is typically ">", ">>" or "»".  It is mostly intended to
be used for stringification of the C<RakuAST::Doc::Markup>
object.

=head3 method atoms

=begin code :preamble<my $markup>
.say for $markup.atoms;  # and␤
=end code

Returns a L<C<List>|/type/List> of the atoms.  Note that each element can
either be a string or another C<RakuAST::Doc::Markup> object.

=head3 method meta

=begin code :preamble<my $markup>
.say for $markup.meta;
=end code

Returns a L<C<List>|/type/List> of the metaobjects.  Note that each element
can either be a string or another C<RakuAST::Doc::Markup> object.
The C<RakuDoc> standard assigns meaning to the meta-information
of markup for certain letters, such as a URL (in case of C<L>).

=head3 method Str

=begin code :preamble<my $markup>
put $markup;  # B<and>␤
=end code

Returns the string for the markup object, with any embedded
markup also stringified.

=head3 method raku

=begin code :preamble<my $markup; use experimental :rakuast>
# method .gist falls back to .raku
say $markup;  # RakuAST::Doc::Markup.new(...
=end code

Returns the string that is needed for the creation of the markup
using L<C<RakuAST>|/type/RakuAST> calls.

=head1 Object creation

One seldom creates C<RakuAST::Doc::Markup> objects directly.  This
documentation is intended for those few people who'd like to devise
their own way of programmatically building a C<RakuAST::Doc::Markup>
object.

=head2 method new

=begin code :method
method new(
  Str:D  :$letter!,      # markup identifier, e.g. "B"
  Str:D  :$opener = "<", # opener marker
  Str:D  :$closer = ">", # closer marker
         :@atoms,        # any atoms of this markup
         :@meta,         # any meta of this markup
)
=end code

The C<new> method can be called to create a new C<RakuAST::Doc::Markup>
object.  It only takes named arguments, with the C<:letter> argument
being mandatory.

=begin code :lang<rakudoc>
B<and>
=end code

=begin code :lang<raku> :preamble<use experimental :rakuast>
my $markup = RakuAST::Doc::Markup.new(
  :letter<B>,
  :atoms("and")
);
=end code

Note that all arguments except C<:letter> are optional.  So it is
possible to create "empty" markup as well.

=head3 :letter

The "type" of markup object.  Generally expected to be an uppercase
letter, but this is not enforced.  The C<RakuDoc> standard assigns
meaning to most ASCII uppercase letters, so one would probably do well
adhering to this standard when using ASCII uppercase letters.

=head3 :opener

The markup opening sequence marker.  Defaults to C<<"<">>.  Mostly
used for stringification.

=head3 :closer

The markup closing sequence marker.  Defaults to C<<">">>.  Mostly
used for stringification.

=head3 :atoms

The actual content of the markup, specified as a L<C<Positional>|/type/Positional>.  Each
element can either be a string or another C<RakuAST::Doc::Markup>
object.

=head3 :meta

The meta-information of the markup, specified as a L<C<Positional>|/type/Positional>.
Each element can either be a string or another C<RakuAST::Doc::Markup>
object.  Note that the C<RakuDoc> standard associates certain meaning
to the meta-information for certain letters, such as the meta-information
being a URL in the case of C<L> being the letter.

=head1 Object modification

=head2 method set-atoms

=begin code :preamble<my $markup>
$markup.set-atoms;  # reset
$markup.set-atoms( ("and",) );
=end code

Set the atoms to the given L<C<Positional>|/type/Positional>.  Values are expected
to be either a string, or a C<RakuAST::Doc::Markup> object.
If no values are specified, then the object will have no atoms.

=head2 method add-atom

=begin code :preamble<my $markup>
$markup.add-atom( ("foo",) );
=end code

Add an atom to the atoms of the object.  Values are expected
to be either a string, or a C<RakuAST::Doc::Markup> object.

=head2 method set-meta

=begin code :preamble<my $markup>
$markup.set-meta;  # reset
$markup.set-meta( ("https://raku.org",) );
=end code

Set the meta-information to the given L<C<Positional>|/type/Positional>.  Values are
expected to be either a string, or a C<RakuAST::Doc::Markup> object.
If no values are specified, then the object will have no
meta-information.

=head2 method add-meta

=begin code :preamble<my $markup>
$markup.add-meta( ("bar",) );
=end code

Add an item to the meta-information of the object.  Values are
expected to be either a string, or a C<RakuAST::Doc::Markup>
object.

=end pod
