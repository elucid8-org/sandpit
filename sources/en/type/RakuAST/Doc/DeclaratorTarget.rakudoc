=begin pod :kind("Type") :subkind("role") :category("basic")

=TITLE class RakuAST::Doc::DeclaratorTarget

=SUBTITLE Provide leading/trailing doc functionality

    role RakuAST::Doc::DeclaratorTarget { }

The C<RakuAST::Doc::DeclaratorTarget> role is done by objects that support
leading and trailing documentation.

Support for L<C<RakuAST>|/type/RakuAST> functionality is available in language version
C<6.e+> and was added in Rakudo compiler release 2023.02.  In earlier
language versions it is only available when specifying:

    use experimental :rakuast;

=head2 Object introspection

Objects doing the C<RakuAST::Doc::DeclaratorTarget> role are typically
created when parsing Raku Programming Language code for objects that
allow leading (C<#|>) and trailing (C<#=>) documentation on them.
So most developers will only need to know how to introspect the objects
created.

=head3 method WHY

=begin code :preamble<my $target>
with $target.WHY {
    say "leading: $_.leading()";
    say "trailing: $_.trailing()";
}
=end code

Returns the L«C<RakuAST::Doc::Declarator>|/type/RakuAST::Doc::Declarator»
object containing the declarator documentation, if any.

=head1 Object creation

Each object doing the C<RakuAST::Doc::DeclaratorTarget> role has its own
why of creation.  So there's nothing general that can be said about it
here.

=head1 Object modification

=head2 method set-WHY

=begin code :preamble<my $target; my $declarator>
$target.set-WHY($declarator);
=end code

Set the L<C<RakuAST::Doc::Declarator>|/type/RakuAST::Doc::Declarator> object to be associated.

=head2 method cut-WHY

=begin code :preamble<my $target>
my $WHY := $target.cut-WHY;
=end code

Removes the L<C<RakuAST::Doc::Declarator>|/type/RakuAST::Doc::Declarator> object, if any.  Intended
to be used when deparsing / stringification to prevent an infinite loop
because the L<C<RakuAST::Doc::Declarator>|/type/RakuAST::Doc::Declarator> object points to its target,
and the other way around.  Usually called on a clone of the original
target.

=head2 method set-leading

=begin code :preamble<my $target>
$target.set-leading;  # reset
$target.set-leading("foo", "bar");
=end code

Set the leading documentation.  If no arguments are specified,
reset to not having any leading documentation.  Creates a
L<C<RakuAST::Doc::Declarator>|/type/RakuAST::Doc::Declarator> object and sets it in the C<.WHY>
if there wasn't one already.

=head2 method add-leading

=begin code :preamble<my $target>
$target.add-leading("additional");
=end code

Add a line to the leading documentation. Creates a
L<C<RakuAST::Doc::Declarator>|/type/RakuAST::Doc::Declarator> object and sets it in the C<.WHY>
if there wasn't one already.

=head2 method set-trailing

=begin code :preamble<my $target>
$target.set-trailing;  # reset
$target.set-trailing("foo", "bar");
=end code

Set the trailing documentation.  If no arguments are specified,
reset to not having any trailing documentation.  Creates a
L<C<RakuAST::Doc::Declarator>|/type/RakuAST::Doc::Declarator> object and sets it in the C<.WHY>
if there wasn't one already.

=head2 method add-trailing

=begin code :preamble<my $target>
$target.add-trailing("additional");
=end code

Add a line to the trailing documentation. Creates a
L<C<RakuAST::Doc::Declarator>|/type/RakuAST::Doc::Declarator> object and sets it in the C<.WHY>
if there wasn't one already.

=end pod
